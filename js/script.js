/**
 * G√©n√©rateur d'Images IA - Script Principal
 * G√®re la g√©n√©ration d'images via l'API Pollinations AI
 * Inclut la sanitisation des entr√©es, l'historique et le mode nuit
 */

// Configuration
const CONFIG = {
    API_BASE_URL: 'https://image.pollinations.ai/prompt',
    GEMINI_API_URL: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',
    GEMINI_API_KEY: 'AIzaSyCpY4V7DVwJSNBOJWNi-E6wK8BIVWHYzXU', // Cl√© API Gemini
    MAX_HISTORY: 5,
    STORAGE_KEY: 'ai-image-generator-history',
    NIGHT_MODE_KEY: 'ai-image-generator-night-mode'
};

// √âl√©ments DOM
const DOM = {
    promptInput: document.getElementById('prompt-input'),
    widthSelect: document.getElementById('width-select'),
    heightSelect: document.getElementById('height-select'),
    generateBtn: document.getElementById('generate-btn'),
    generatedImage: document.getElementById('generated-image'),
    loadingSpinner: document.querySelector('.loading-spinner'),
    errorMessage: document.getElementById('error-message'),
    errorSpan: document.querySelector('#error-message span'),
    historyList: document.getElementById('history-list'),
    nightModeToggle: document.getElementById('night-mode-toggle'),
    promptButtons: document.querySelectorAll('.prompt-btn'),
    promptCategories: document.querySelectorAll('.prompt-category'),
    placeholderContent: document.querySelector('.placeholder-content'),
    noHistory: document.querySelector('.no-history')
};

// √âtat de l'application
let generationHistory = [];
let isGenerating = false;
let selectedStyle = ''; // Variable globale pour stocker le style actuellement s√©lectionn√©

/**
 * Initialise l'application
 */
function initializeApp() {
    loadHistory();
    loadNightModePreference();
    setupEventListeners();
    updateHistoryDisplay();
    
    // Focus sur le champ de prompt pour une meilleure UX
    DOM.promptInput.focus();
    
    console.log('üé® G√©n√©rateur d\'Images IA initialis√©');
}

/**
 * Configure tous les √©couteurs d'√©v√©nements
 */
function setupEventListeners() {
    // G√©n√©ration d'image
    DOM.generateBtn.addEventListener('click', handleGenerate);
    
    // G√©n√©ration avec la touche Entr√©e
    DOM.promptInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleGenerate();
        }
    });
    
    // Mode nuit
    DOM.nightModeToggle.addEventListener('click', toggleNightMode);
    
    // Prompts structur√©s - utilisation uniquement du style sans changer l'input
    DOM.promptButtons.forEach(button => {
        button.addEventListener('click', () => {
            // On r√©cup√®re uniquement le style
            selectedStyle = button.dataset.style || '';
            
            // On ne modifie PAS le contenu du champ de saisie
            // mais on garde le focus sur le champ
            DOM.promptInput.focus();
            
            // Mise en surbrillance du bouton actif
            document.querySelectorAll('.prompt-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            button.classList.add('active');
            
            // Animation de feedback
            button.style.transform = 'scale(0.95)';
            setTimeout(() => {
                button.style.transform = '';
            }, 150);
            
            // Indication visuelle du style s√©lectionn√©
            const styleBadge = document.getElementById('selected-style-badge') || createStyleBadge();
            updateStyleBadge(styleBadge, selectedStyle);
            
            console.log('ÔøΩ Style sugg√©r√© s√©lectionn√©:', selectedStyle);
        });
    });
    
    // Fonction pour cr√©er le badge de style
    function createStyleBadge() {
        const badge = document.createElement('div');
        badge.id = 'selected-style-badge';
        badge.className = 'selected-style-badge';
        
        // Ajouter √† c√¥t√© du bouton g√©n√©rer
        DOM.generateBtn.parentNode.insertBefore(badge, DOM.generateBtn);
        return badge;
    }
    
    // Mettre √† jour le badge de style
    function updateStyleBadge(badge, style) {
        if (!style) {
            badge.style.display = 'none';
            return;
        }
        
        badge.style.display = 'flex';
        badge.innerHTML = `<i class="fas fa-palette"></i> Style: <span>${style}</span>
                          <button class="clear-style"><i class="fas fa-times"></i></button>`;
        
        // Ajouter un gestionnaire pour effacer le style
        const clearBtn = badge.querySelector('.clear-style');
        clearBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            selectedStyle = '';
            badge.style.display = 'none';
            
            // D√©selectionner tous les boutons
            document.querySelectorAll('.prompt-btn').forEach(btn => {
                btn.classList.remove('active');
            });
        });
    }
    
    // Accessibilit√© - navigation au clavier pour les prompts
    DOM.promptButtons.forEach((button, index) => {
        button.addEventListener('keydown', (e) => {
            const currentCategory = button.closest('.prompt-category');
            const categoryButtons = Array.from(currentCategory.querySelectorAll('.prompt-btn'));
            const buttonIndexInCategory = categoryButtons.indexOf(button);
            
            if (e.key === 'ArrowRight') {
                e.preventDefault();
                const nextIndex = (buttonIndexInCategory + 1) % categoryButtons.length;
                categoryButtons[nextIndex].focus();
            } else if (e.key === 'ArrowLeft') {
                e.preventDefault();
                const prevIndex = (buttonIndexInCategory - 1 + categoryButtons.length) % categoryButtons.length;
                categoryButtons[prevIndex].focus();
            } else if (e.key === 'ArrowDown') {
                e.preventDefault();
                // Aller √† la cat√©gorie suivante
                const categories = Array.from(document.querySelectorAll('.prompt-category'));
                const categoryIndex = categories.indexOf(currentCategory);
                const nextCategoryIndex = (categoryIndex + 1) % categories.length;
                
                if (categories[nextCategoryIndex]) {
                    const nextCategoryButtons = categories[nextCategoryIndex].querySelectorAll('.prompt-btn');
                    if (nextCategoryButtons.length > 0) {
                        // Essayer de conserver la m√™me position horizontale
                        const targetIndex = Math.min(buttonIndexInCategory, nextCategoryButtons.length - 1);
                        nextCategoryButtons[targetIndex].focus();
                    }
                }
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                // Aller √† la cat√©gorie pr√©c√©dente
                const categories = Array.from(document.querySelectorAll('.prompt-category'));
                const categoryIndex = categories.indexOf(currentCategory);
                const prevCategoryIndex = (categoryIndex - 1 + categories.length) % categories.length;
                
                if (categories[prevCategoryIndex]) {
                    const prevCategoryButtons = categories[prevCategoryIndex].querySelectorAll('.prompt-btn');
                    if (prevCategoryButtons.length > 0) {
                        // Essayer de conserver la m√™me position horizontale
                        const targetIndex = Math.min(buttonIndexInCategory, prevCategoryButtons.length - 1);
                        prevCategoryButtons[targetIndex].focus();
                    }
                }
            }
        });
    });
}

/**
 * Sanitise l'entr√©e utilisateur pour pr√©venir les injections
 * @param {string} input - Texte √† sanitiser
 * @returns {string} Texte sanitis√©
 */
function sanitizeInput(input) {
    if (!input || typeof input !== 'string') return '';
    
    // Supprime les caract√®res dangereux et limite la longueur
    return input
        .trim()
        .replace(/[<>\"'&]/g, '') // Supprime les caract√®res HTML dangereux
        .replace(/[{}[\]]/g, '') // Supprime les caract√®res de structure
        .substring(0, 500); // Limite √† 500 caract√®res
}

/**
 * Analyse le prompt pour identifier s'il provient des suggestions structur√©es
 * @param {string} prompt - Le prompt √† analyser
 * @returns {Object} Informations sur le prompt (sujet, style, etc.)
 */
function analyzePrompt(prompt) {
    // V√©rifier si le prompt suit le format "sujet, style"
    const parts = prompt.split(',').map(part => part.trim());
    
    // Si nous avons au moins 2 parties, consid√©rons la premi√®re comme sujet et le reste comme style
    if (parts.length >= 2) {
        return {
            subject: parts[0],
            style: parts.slice(1).join(', '),
            isStructured: true
        };
    }
    
    // Sinon c'est un prompt libre
    return {
        subject: prompt,
        style: '',
        isStructured: false
    };
}

/**
 * Am√©liore le prompt utilisateur avec l'API Gemini
 * Transforme un prompt simple en description d√©taill√©e pour de meilleurs r√©sultats
 * @param {string} prompt - Prompt original de l'utilisateur
 * @returns {Promise<string>} - Prompt am√©lior√© ou prompt original en cas d'erreur
 */
async function enhancePromptWithGemini(prompt) {
    console.log('üß† Demande d\'am√©lioration du prompt √† Gemini:', prompt);
    console.log('üé≠ Style s√©lectionn√©:', selectedStyle ? selectedStyle : 'Aucun style s√©lectionn√©');
    
    try {
        // Construction du message pour Gemini en fonction du style s√©lectionn√© ou non
        let geminiPrompt;
        
        if (selectedStyle) {
            // Si un style est s√©lectionn√©, on l'applique directement au prompt utilisateur
            console.log('üé≠ Application du style sugg√©r√©:', selectedStyle);
            
            geminiPrompt = `Cr√©e un prompt d√©taill√© pour g√©n√©rer une image IA de haute qualit√©.
                           Sujet de l'image: "${prompt}"
                           Style artistique √† appliquer: "${selectedStyle}"
                           
                           D√©veloppe ce prompt en combinant le sujet demand√© avec le style indiqu√©:
                           1. Garde le sujet principal exactement comme demand√©
                           2. Applique le style artistique sp√©cifi√© de mani√®re coh√©rente
                           3. Ajoute des d√©tails visuels pr√©cis sur la composition, l'√©clairage, les couleurs
                           4. Enrichis avec des √©l√©ments techniques qui renforcent le style mentionn√©
                           
                           Format de r√©ponse: une description d√©taill√©e, concise et coh√©rente.
                           Maximum 100 mots. Pas d'introduction ni de conclusion.`;
        } else {
            // Si aucun style n'est s√©lectionn√©, analyse du prompt pour l'am√©lioration standard
            const promptInfo = analyzePrompt(prompt);
            
            if (promptInfo.isStructured) {
                geminiPrompt = `Cr√©e un prompt d√©taill√© pour g√©n√©rer une image IA de haute qualit√©.
                               Sujet principal: "${promptInfo.subject}"
                               Style indiqu√©: "${promptInfo.style}"
                               
                               D√©veloppe ce prompt en enrichissant ces √©l√©ments:
                               1. Description visuelle pr√©cise du sujet principal
                               2. D√©tails sur la composition, l'√©clairage, les couleurs, la perspective
                               3. Ambiance et atmosph√®re g√©n√©rale
                               4. D√©tails techniques comme la r√©solution, le rendu, les effets sp√©cifiques
                               
                               Format de r√©ponse: une description d√©taill√©e, concise et coh√©rente.
                               Maximum 100 mots. Pas d'introduction ni de conclusion.`;
            } else {
                geminiPrompt = `Am√©liore ce prompt pour g√©n√©rer une image IA de haute qualit√©: "${prompt}"
                               
                               Ne change pas le sujet principal mais ajoute des d√©tails sur:
                               - Style artistique et technique de rendu
                               - √âclairage, ombres et atmosph√®re
                               - Perspective, composition et cadrage
                               - Couleurs, contrastes et tonalit√©s
                               - D√©tails qui ajoutent du r√©alisme ou de l'impact
                               
                               Maximum 100 mots. Pas d'introduction ni de conclusion.`;
            }
        }
        
        // Construit le corps de la requ√™te pour l'API Gemini
        const requestBody = {
            contents: [{
                parts: [{
                    text: geminiPrompt
                }]
            }]
        };
        
        // Appel √† l'API Gemini
        const response = await fetch(CONFIG.GEMINI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-goog-api-key': CONFIG.GEMINI_API_KEY
            },
            body: JSON.stringify(requestBody)
        });
        
        if (!response.ok) {
            throw new Error(`Erreur API Gemini: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        
        // Extraction du texte am√©lior√© depuis la r√©ponse
        if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
            const enhancedPrompt = data.candidates[0].content.parts[0].text.trim();
            console.log('üé® Prompt am√©lior√© par Gemini:', enhancedPrompt);
            return enhancedPrompt;
        } else {
            console.warn('‚ö†Ô∏è Format de r√©ponse Gemini inattendu:', data);
            return prompt; // En cas de r√©ponse mal format√©e, on retourne le prompt original
        }
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'am√©lioration du prompt avec Gemini:', error);
        // En cas d'erreur, on retourne le prompt original
        return prompt;
    }
}

/**
 * Valide les param√®tres de g√©n√©ration
 * @param {string} prompt - Prompt utilisateur
 * @param {string} width - Largeur de l'image
 * @param {string} height - Hauteur de l'image
 * @returns {Object} R√©sultat de validation
 */
function validateGenerationParams(prompt, width, height) {
    const errors = [];
    
    if (!prompt || prompt.length < 3) {
        errors.push('Le prompt doit contenir au moins 3 caract√®res');
    }
    
    if (prompt.length > 500) {
        errors.push('Le prompt ne peut pas d√©passer 500 caract√®res');
    }
    
    const validSizes = ['512', '768', '1024'];
    if (!validSizes.includes(width)) {
        errors.push('Largeur invalide');
    }
    
    if (!validSizes.includes(height)) {
        errors.push('Hauteur invalide');
    }
    
    return {
        isValid: errors.length === 0,
        errors
    };
}

/**
 * Construit l'URL de l'API
 * @param {string} prompt - Prompt sanitis√©
 * @param {string} width - Largeur
 * @param {string} height - Hauteur
 * @returns {string} URL de l'API
 */
function buildApiUrl(prompt, width, height) {
    const encodedPrompt = encodeURIComponent(prompt);
    return `${CONFIG.API_BASE_URL}/${encodedPrompt}?width=${width}&height=${height}&seed=-1&model=flux`;
}

/**
 * Affiche l'√©tat de chargement
 */
function showLoading() {
    DOM.placeholderContent.style.display = 'none';
    DOM.generatedImage.style.display = 'none';
    DOM.errorMessage.style.display = 'none';
    DOM.loadingSpinner.style.display = 'flex';
    DOM.generateBtn.disabled = true;
    DOM.generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>G√©n√©ration...</span>';
    isGenerating = true;
}

/**
 * Masque l'√©tat de chargement
 */
function hideLoading() {
    DOM.loadingSpinner.style.display = 'none';
    DOM.generateBtn.disabled = false;
    DOM.generateBtn.innerHTML = '<i class="fas fa-wand-magic-sparkles"></i><span>G√©n√©rer l\'image</span>';
    isGenerating = false;
}

/**
 * Affiche un message d'erreur
 * @param {string} message - Message d'erreur
 */
function showError(message) {
    DOM.errorSpan.textContent = message;
    DOM.errorMessage.style.display = 'flex';
    DOM.generatedImage.style.display = 'none';
    DOM.placeholderContent.style.display = 'block';
    
    // Animation d'erreur
    DOM.errorMessage.style.animation = 'none';
    setTimeout(() => {
        DOM.errorMessage.style.animation = 'fadeInUp 0.3s ease-out';
    }, 10);
}

/**
 * Affiche une notification montrant comment Gemini a am√©lior√© le prompt
 * @param {string} originalPrompt - Le prompt original de l'utilisateur
 * @param {string} enhancedPrompt - Le prompt am√©lior√© par Gemini
 * @param {string} appliedStyle - Le style appliqu√©, s'il y en a un
 */
function showPromptEnhancementNotification(originalPrompt, enhancedPrompt, appliedStyle = '') {
    // Supprimer les anciennes notifications
    const existingNotifs = document.querySelectorAll('.prompt-enhancement-notification');
    existingNotifs.forEach(notif => notif.remove());
    
    // Cr√©er une nouvelle notification
    const notification = document.createElement('div');
    notification.className = 'prompt-enhancement-notification';
    
    // Contenu de base de la notification
    let notificationContent = `
        <div class="notification-header">
            <i class="fas fa-magic"></i> Prompt am√©lior√© par Gemini
            <button class="close-btn"><i class="fas fa-times"></i></button>
        </div>
        <div class="notification-content">
    `;
    
    // Ajouter le style appliqu√© s'il y en a un
    if (appliedStyle) {
        notificationContent += `
            <div class="applied-style">
                <i class="fas fa-palette"></i> Style appliqu√©: <span>${appliedStyle}</span>
            </div>
        `;
    }
    
    // Ajouter la comparaison des prompts
    notificationContent += `
            <div class="prompt-comparison">
                <div class="prompt-original">
                    <h4>Prompt original</h4>
                    <p>${originalPrompt}</p>
                </div>
                <div class="prompt-arrow">
                    <i class="fas fa-arrow-right"></i>
                </div>
                <div class="prompt-enhanced">
                    <h4>Prompt am√©lior√©</h4>
                    <p>${enhancedPrompt}</p>
                </div>
            </div>
        </div>
    `;
    
    notification.innerHTML = notificationContent;
    
    // Ajouter au DOM
    document.body.appendChild(notification);
    
    // Animation d'entr√©e
    setTimeout(() => {
        notification.classList.add('visible');
    }, 100);
    
    // Fonction de fermeture uniquement lorsque l'utilisateur clique sur X
    const closeBtn = notification.querySelector('.close-btn');
    closeBtn.addEventListener('click', () => {
        notification.classList.remove('visible');
        setTimeout(() => {
            notification.remove();
        }, 300);
    });
    
    // Aucune fermeture automatique - la notification reste jusqu'√† ce que l'utilisateur la ferme
}

/**
 * Affiche l'image g√©n√©r√©e
 * @param {string} imageUrl - URL de l'image
 */
function showGeneratedImage(imageUrl) {
    DOM.placeholderContent.style.display = 'none';
    DOM.errorMessage.style.display = 'none';
    DOM.generatedImage.src = imageUrl;
    DOM.generatedImage.style.display = 'block';
    
    // Animation d'apparition
    DOM.generatedImage.style.opacity = '0';
    DOM.generatedImage.style.transform = 'scale(0.9)';
    
    DOM.generatedImage.onload = () => {
        DOM.generatedImage.style.transition = 'all 0.3s ease-out';
        DOM.generatedImage.style.opacity = '1';
        DOM.generatedImage.style.transform = 'scale(1)';
    };
}

/**
 * G√®re la g√©n√©ration d'image
 */
async function handleGenerate() {
    if (isGenerating) return;
    
    const rawPrompt = DOM.promptInput.value;
    const width = DOM.widthSelect.value;
    const height = DOM.heightSelect.value;
    
    // Sanitisation
    const sanitizedPrompt = sanitizeInput(rawPrompt);
    
    // Validation
    const validation = validateGenerationParams(sanitizedPrompt, width, height);
    if (!validation.isValid) {
        showError(validation.errors.join('. '));
        return;
    }
    
    showLoading();
    
    try {
        // Am√©lioration du prompt avec Gemini
        const enhancedPrompt = await enhancePromptWithGemini(sanitizedPrompt);
        
        // Utilisation du prompt am√©lior√© pour la g√©n√©ration d'image
        const apiUrl = buildApiUrl(enhancedPrompt, width, height);
        console.log('üîó URL API:', apiUrl);
        
        // G√©n√©ration avec timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 100000); // 100 secondes
        
        const response = await fetch(apiUrl, {
            signal: controller.signal,
            headers: {
                'Accept': 'image/*'
            }
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            throw new Error(`Erreur HTTP ${response.status}: ${response.statusText}`);
        }
        
        // L'API retourne directement l'image
        const imageUrl = response.url;
        
        // V√©rification que l'image est valide
        await validateImageUrl(imageUrl);
        
        showGeneratedImage(imageUrl);
        
        // Afficher une notification avec le prompt am√©lior√©
        showPromptEnhancementNotification(rawPrompt, enhancedPrompt, selectedStyle);
        
        // Ajout √† l'historique avec le prompt original et le prompt am√©lior√©
        addToHistory({
            prompt: enhancedPrompt,
            originalPrompt: rawPrompt,
            enhancedPrompt: enhancedPrompt, // Sauvegarde du prompt am√©lior√©
            appliedStyle: selectedStyle,    // Style utilis√© pour cette g√©n√©ration
            imageUrl,
            width,
            height,
            timestamp: Date.now()
        });
        
        // R√©initialiser le style s√©lectionn√© apr√®s g√©n√©ration
        if (selectedStyle) {
            console.log('üßπ R√©initialisation du style apr√®s g√©n√©ration:', selectedStyle);
            selectedStyle = '';
            document.querySelectorAll('.prompt-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            const styleBadge = document.getElementById('selected-style-badge');
            if (styleBadge) styleBadge.style.display = 'none';
        }
        
        console.log('‚úÖ Image g√©n√©r√©e avec succ√®s');
        console.log('üìù Prompt original:', rawPrompt);
        console.log('üß† Prompt am√©lior√© utilis√©:', enhancedPrompt);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration:', error);
        
        let errorMessage = 'Une erreur est survenue lors de la g√©n√©ration';
        
        if (error.name === 'AbortError') {
            errorMessage = 'La g√©n√©ration a pris trop de temps. Veuillez r√©essayer.';
        } else if (error.message.includes('Failed to fetch')) {
            errorMessage = 'Probl√®me de connexion. V√©rifiez votre connexion internet.';
        } else if (error.message.includes('HTTP')) {
            errorMessage = 'Erreur du serveur. Veuillez r√©essayer dans quelques instants.';
        } else if (error.message.includes('Gemini')) {
            errorMessage = 'Erreur lors de l\'am√©lioration du prompt. Veuillez r√©essayer.';
        }
        
        showError(errorMessage);
    } finally {
        hideLoading();
    }
}

/**
 * Valide qu'une URL d'image est accessible
 * @param {string} imageUrl - URL √† valider
 * @returns {Promise} Promise qui se r√©sout si l'image est valide
 */
function validateImageUrl(imageUrl) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => resolve();
        img.onerror = () => reject(new Error('Image non valide'));
        img.src = imageUrl;
    });
}

/**
 * Ajoute un √©l√©ment √† l'historique
 * @param {Object} item - √âl√©ment √† ajouter
 */
function addToHistory(item) {
    // Supprime les doublons bas√©s sur le prompt
    generationHistory = generationHistory.filter(
        existing => existing.prompt !== item.prompt
    );
    
    // Ajoute au d√©but
    generationHistory.unshift(item);
    
    // Limite √† MAX_HISTORY √©l√©ments
    if (generationHistory.length > CONFIG.MAX_HISTORY) {
        generationHistory = generationHistory.slice(0, CONFIG.MAX_HISTORY);
    }
    
    saveHistory();
    updateHistoryDisplay();
}

/**
 * Met √† jour l'affichage de l'historique
 */
function updateHistoryDisplay() {
    if (generationHistory.length === 0) {
        DOM.noHistory.style.display = 'block';
        return;
    }
    
    DOM.noHistory.style.display = 'none';
    
    // Supprime les √©l√©ments existants sauf le placeholder
    const existingItems = DOM.historyList.querySelectorAll('.history-item');
    existingItems.forEach(item => item.remove());
    
    // Ajoute les nouveaux √©l√©ments
    generationHistory.forEach((item, index) => {
        const historyItem = createHistoryItem(item, index);
        DOM.historyList.appendChild(historyItem);
    });
}

/**
 * Cr√©e un √©l√©ment d'historique
 * @param {Object} item - Donn√©es de l'√©l√©ment
 * @param {number} index - Index dans l'historique
 * @returns {HTMLElement} √âl√©ment DOM
 */
function createHistoryItem(item, index) {
    const historyItem = document.createElement('div');
    historyItem.className = 'history-item';
    historyItem.setAttribute('role', 'button');
    historyItem.setAttribute('tabindex', '0');
    historyItem.setAttribute('aria-label', `R√©utiliser: ${item.originalPrompt}`);
    
    // Ajouter une info-bulle avec les prompts (original et am√©lior√©)
    const tooltipText = item.enhancedPrompt ? 
        `Original: "${item.originalPrompt}"\nAm√©lior√©: "${item.enhancedPrompt}"` : 
        item.originalPrompt;
    historyItem.setAttribute('title', tooltipText);
    
    // Ajouter une indication visuelle que le prompt a √©t√© am√©lior√©
    if (item.enhancedPrompt && item.enhancedPrompt !== item.originalPrompt) {
        const enhancedBadge = document.createElement('div');
        enhancedBadge.className = 'enhanced-badge';
        enhancedBadge.innerHTML = '<i class="fas fa-magic"></i>';
        enhancedBadge.title = 'Prompt am√©lior√© par IA';
        historyItem.appendChild(enhancedBadge);
    }
    
    const img = document.createElement('img');
    img.src = item.imageUrl;
    img.alt = item.originalPrompt;
    img.loading = 'lazy';
    
    historyItem.appendChild(img);
    
    // Gestionnaire de clic/clavier
    const handleActivation = () => {
        // Par d√©faut, on met le prompt original dans le champ de saisie
        DOM.promptInput.value = item.originalPrompt;
        
        // On peut aussi ajouter une option pour utiliser directement le prompt am√©lior√©
        // si le clic est fait avec la touche Alt ou Shift
        if (window.event && (window.event.altKey || window.event.shiftKey) && item.enhancedPrompt) {
            DOM.promptInput.value = item.enhancedPrompt;
        }
        
        DOM.widthSelect.value = item.width;
        DOM.heightSelect.value = item.height;
        showGeneratedImage(item.imageUrl);
        DOM.promptInput.focus();
        
        // Animation de feedback
        historyItem.style.transform = 'scale(0.95)';
        setTimeout(() => {
            historyItem.style.transform = '';
        }, 150);
    };
    
    historyItem.addEventListener('click', handleActivation);
    historyItem.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            handleActivation();
        }
    });
    
    // Animation d'entr√©e
    historyItem.style.opacity = '0';
    historyItem.style.transform = 'translateY(20px)';
    
    setTimeout(() => {
        historyItem.style.transition = 'all 0.3s ease-out';
        historyItem.style.opacity = '1';
        historyItem.style.transform = 'translateY(0)';
    }, index * 100);
    
    return historyItem;
}

/**
 * Sauvegarde l'historique dans le localStorage
 */
function saveHistory() {
    try {
        localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(generationHistory));
    } catch (error) {
        console.warn('‚ö†Ô∏è Impossible de sauvegarder l\'historique:', error);
    }
}

/**
 * Charge l'historique depuis le localStorage
 */
function loadHistory() {
    try {
        const saved = localStorage.getItem(CONFIG.STORAGE_KEY);
        if (saved) {
            generationHistory = JSON.parse(saved);
            console.log(`üìö Historique charg√©: ${generationHistory.length} √©l√©ments`);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Impossible de charger l\'historique:', error);
        generationHistory = [];
    }
}

/**
 * Bascule le mode nuit
 */
function toggleNightMode() {
    document.body.classList.toggle('night-mode');
    const isNightMode = document.body.classList.contains('night-mode');
    
    // Sauvegarde de la pr√©f√©rence
    try {
        localStorage.setItem(CONFIG.NIGHT_MODE_KEY, isNightMode.toString());
    } catch (error) {
        console.warn('‚ö†Ô∏è Impossible de sauvegarder la pr√©f√©rence de mode:', error);
    }
    
    // Animation du bouton
    DOM.nightModeToggle.style.transform = 'rotate(180deg)';
    setTimeout(() => {
        DOM.nightModeToggle.style.transform = '';
    }, 300);
    
    console.log(`üåô Mode nuit: ${isNightMode ? 'activ√©' : 'd√©sactiv√©'}`);
}

/**
 * Charge la pr√©f√©rence de mode nuit
 */
function loadNightModePreference() {
    try {
        const saved = localStorage.getItem(CONFIG.NIGHT_MODE_KEY);
        if (saved === 'true') {
            document.body.classList.add('night-mode');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Impossible de charger la pr√©f√©rence de mode:', error);
    }
}

/**
 * Gestion des raccourcis clavier globaux
 */
document.addEventListener('keydown', (e) => {
    // Ctrl/Cmd + Enter pour g√©n√©rer
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        e.preventDefault();
        handleGenerate();
    }
    
    // Ctrl/Cmd + D pour basculer le mode nuit
    if ((e.ctrlKey || e.metaKey) && e.key === 'd') {
        e.preventDefault();
        toggleNightMode();
    }
});

/**
 * Gestion des erreurs globales
 */
window.addEventListener('error', (e) => {
    console.error('‚ùå Erreur globale:', e.error);
});

window.addEventListener('unhandledrejection', (e) => {
    console.error('‚ùå Promise rejet√©e:', e.reason);
});

// Initialisation de l'application
document.addEventListener('DOMContentLoaded', initializeApp);

// Export pour les tests (si n√©cessaire)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        sanitizeInput,
        validateGenerationParams,
        buildApiUrl
    };
}

